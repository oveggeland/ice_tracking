#!/usr/bin/env python3

import os
import rospy
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt


MSG_TYPES = [
    "IMU",
    "GNSS",
    "LiDAR"
]

def reset_cumsum(arr):
    sum = 0
    result = np.zeros_like(arr)
    for i in range(len(arr)):
        sum += arr[i]
        if sum < 0:
            sum = 0  # Reset to zero if cumulative sum is negative
        result[i] = sum
    return result


if __name__ == "__main__":
    rospy.init_node("diag_analysis_node")
    # Read the CSV file into a pandas DataFrame
    outpath = rospy.get_param('outpath')
    diag_path = os.path.join(outpath, "diag")
    filename = os.path.join(diag_path, "diag.csv")
    data = pd.read_csv(filename)

    # Calculate rolling differences for t_stamp and t0_wall
    window_size = 500
    data['rolling_delta_t_stamp'] = data['t_stamp'].diff(window_size)
    data['rolling_delta_t0_wall'] = data['t0_wall'].diff(window_size)

    # Calculate the Real Time Factor (RTF) based on rolling differences
    data['real_time_factor'] = data['rolling_delta_t_stamp'] / data['rolling_delta_t0_wall']

    # Calculate per-frame processing time (t1_wall - t0_wall)
    data['processing_time'] = data['t1_wall'] - data['t0_wall']

    # Plot: Real Time Factor as a time series
    plt.figure(figsize=(10, 6))
    plt.plot(data['t_stamp'], data['real_time_factor'], label='RTF', color='blue')
    plt.xlabel('Timestamp')
    plt.ylabel('Real Time Factor (RTF)')
    plt.title('Real Time Factor over Time')
    plt.grid()
    plt.legend()
    plt.tight_layout()
    plt.savefig(os.path.join(diag_path, "real_time_factor.pdf"))

    
    # Plot: Latency
    data['delta_t_stamp'] = data['t_stamp'].diff()
    data['delta_t0_wall'] = data['t0_wall'].diff()
    
    data['delta_latency'] = data['delta_t0_wall'] - data['delta_t_stamp']
    data = data.dropna()

    data['cum_latency'] = reset_cumsum(data['delta_latency'].values)
    
    plt.figure(figsize=(10, 6))
    plt.plot(data['t_stamp'], data['cum_latency'])
    plt.xlabel('Timestamp')
    plt.ylabel('Latency (s)')
    plt.title('Output latency')
    plt.grid()
    plt.tight_layout()
    plt.savefig(os.path.join(diag_path, "latency.pdf"))
    
    plt.show()