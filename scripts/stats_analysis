#!/usr/bin/env python3

import os
import rospy
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt



def elevation_analysis(input_path, output_path):
    # Iterate through the files in the directory
    for filename in os.listdir(input_path):
        if filename.endswith(".elev"):  # Assuming the files have ".ply" extension
            file_path = os.path.join(input_path, filename)

            # Read the binary data from the file
            with open(file_path, 'rb') as f:
                # Read the number of z-values (first value in the binary file)
                num_points = np.fromfile(f, dtype=np.uint64, count=1)[0]

                # Read the z-values from the binary file
                z_values = np.fromfile(f, dtype=np.float64, count=num_points)

            # Create a histogram of the z-values for this file
            plt.figure(figsize=(10, 6))
            plt.hist(-z_values, bins=50, color='blue', edgecolor='black', alpha=0.7)

            # Add labels and title
            plt.xlabel("Z Value")
            plt.ylabel("Frequency")
            plt.title(f"Histogram of Z Values - {filename}")

            # Save the histogram as a PNG file to the output path
            output_file = os.path.join(output_path, f"{filename}_histogram.png")
            plt.savefig(output_file)

            # Clear the figure to prevent overlap when generating the next histogram
            plt.clf()

            # Print completion message for the current file
            print(f"Histogram for {filename} saved as {output_file}")
            
        if rospy.is_shutdown():
            break



if __name__ == "__main__":
    rospy.init_node("stats_analysis_node")
    
    # Get the output path
    out_path = rospy.get_param("outpath")
    stats_path = os.path.join(out_path, "stats")
    

    # Load the CSV file into a DataFrame
    df = pd.read_csv(os.path.join(stats_path, "stats.csv"))

    # Convert timestamp to a readable format if necessary (optional)
    #df['ts'] = pd.to_datetime(df['ts'], unit='s')

    # Create a figure and subplots
    fig, axs = plt.subplots(3, 1, figsize=(10, 12), sharex=True)

    # Top subplot: Plot the count over time
    axs[0].plot(df['ts'], df['count'], label='Count', color='blue')
    axs[0].set_ylabel("Count")
    axs[0].set_title("Count over Time")
    axs[0].grid(True)
    axs[0].legend()

    # Second subplot: Compare mean values
    axs[1].plot(df['ts'], df['z_mean'], label='z_mean', color='green')
    axs[1].plot(df['ts'], df['z_exp_mean'], label='z_exp_mean', color='red', linestyle='--')
    axs[1].set_ylabel("Mean Value")
    axs[1].set_title("Comparison of Mean Values")
    axs[1].grid(True)
    axs[1].legend()

    # Third subplot: Compare variance values
    axs[2].plot(df['ts'], df['z_var'], label='z_var', color='purple')
    axs[2].plot(df['ts'], df['z_exp_var'], label='z_exp_var', color='orange', linestyle='--')
    axs[2].set_ylabel("Variance")
    axs[2].set_title("Comparison of Variance Values")
    axs[2].grid(True)
    axs[2].legend()

    # Set x-axis label
    axs[2].set_xlabel("Timestamp")

    # Adjust layout for better appearance
    plt.tight_layout()

    # Save the plot to a PDF file
    plt.savefig(os.path.join(stats_path, "stats.pdf"))


    hist_path = os.path.join(out_path, "elev_hist")
    os.makedirs(hist_path, exist_ok=True)
    
    plt.show()